{"version":3,"file":"static/js/199.44025857.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Contacts/Contacts.jsx"],"sourcesContent":["export const Filter = ({filterState, handleFilter}) => {\n\n    return (\n        <>\n        <p>Find contacts by name</p>\n        <input \n            type=\"text\" \n            name=\"filter\" \n            value={filterState} \n            onChange={(e) => handleFilter(e.target.value)}/>\n       \n        </>\n    )\n}\n\n","import { ButtonStyled, ContactItem } from '../Contacts/PhoneBook.styled';\n\nimport { useGetContactsQuery, useDeleteContactMutation } from '../store';\n\nexport const ContactList = ({ filteredArr }) => {\n  const { data } = useGetContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <ul>\n      {data && (\n        <>\n          {filteredArr.map(item => (\n            <li key={item.id}>\n              <ContactItem>\n                {item.name}: {item.number}\n              </ContactItem>\n              <ButtonStyled onClick={() => deleteContact(item.id)}>\n                Delete\n              </ButtonStyled>\n            </li>\n          ))}\n        </>\n      )}\n    </ul>\n  );\n};\n","import * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport {\n  ButtonStyled,\n  FormStyled,\n  LabelStyled,\n  FieldStyled,\n  Error,\n} from '../Contacts/PhoneBook.styled';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      /^[aA-zZ\\s]+$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup.number().min(7).required(),\n});\n\nexport const ContactForm = ({ initialValues, onSubmit }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <LabelStyled>\n          Name\n          <FieldStyled\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" component={Error} />\n        </LabelStyled>\n        <LabelStyled>\n          Number\n          <FieldStyled type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component={Error} />\n        </LabelStyled>\n        <ButtonStyled type=\"submit\">Add Contact</ButtonStyled>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import { HeadTitle } from './PhoneBook.styled';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { useGetContactsQuery, useAddContactMutation } from '../store';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n// import { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport authOperations from '../../Redux/authOperations';\n\nconst Contacts = () => {\n  const [name] = useState('');\n  const [number] = useState('');\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(authOperations.fetchCurrentUser());\n  }, [dispatch]);\n\n  const { data: items } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const handleSubmit = async (e, { resetForm }) => {\n    try {\n      if (\n        await items.find(el =>\n          el.name.toLowerCase().includes(e.name.toLowerCase())\n        )\n      ) {\n        alert(`${e.name} is already in contacts.`);\n      } else {\n        const newContact = {\n          name: e.name,\n          number: e.number,\n        };\n\n        await addContact(newContact);\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n\n    resetForm();\n  };\n\n  const handleFilter = e => {\n    setFilter(e);\n  };\n\n  const getVisibleContacts = () => {\n    let result;\n    if (items) {\n      result = items.filter(el =>\n        el.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      result = items;\n    }\n\n    return result;\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      {/* <Helmet>\n        <title>Contacts</title>\n      </Helmet> */}\n      <HeadTitle>Phonebook</HeadTitle>\n\n      <ContactForm\n        initialValues={{ items, name, number }}\n        onSubmit={handleSubmit}\n      />\n      <HeadTitle>Contacts</HeadTitle>\n\n      <Filter filterState={filter} handleFilter={handleFilter} />\n\n      {items && <ContactList filteredArr={visibleContacts} />}\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  initialValues: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.array,\n  filterState: PropTypes.string,\n  handleFilter: PropTypes.func,\n};\n\nContactList.propTypes = {\n  filteredArr: PropTypes.array,\n};\n\nexport default Contacts;\n"],"names":["Filter","filterState","handleFilter","type","name","value","onChange","e","target","ContactList","filteredArr","data","useGetContactsQuery","useDeleteContactMutation","deleteContact","map","item","number","onClick","id","schema","yup","shape","min","matches","required","ContactForm","initialValues","onSubmit","validationSchema","title","component","Error","propTypes","PropTypes","contacts","useState","filter","setFilter","dispatch","useDispatch","useEffect","authOperations","items","useAddContactMutation","addContact","handleSubmit","resetForm","find","el","toLowerCase","includes","alert","newContact","message","visibleContacts"],"sourceRoot":""}